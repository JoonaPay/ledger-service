"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.generateEntity = generateEntity;
const path = __importStar(require("path"));
const chalk_1 = __importDefault(require("chalk"));
const file_utils_1 = require("../utils/file.utils");
const naming_utils_1 = require("../utils/naming.utils");
async function generateEntity(entityName, options) {
    if (!options.module) {
        throw new Error('Module name is required. Use -m or --module option.');
    }
    console.log(chalk_1.default.blue(`Generating entity: ${entityName}`));
    const basePath = options.path || process.cwd();
    const modulePath = (0, file_utils_1.getModulePath)(basePath, options.module);
    const templateData = (0, file_utils_1.prepareTemplateData)(entityName, options.module);
    // Generate domain entity
    const entityTemplatePath = path.join(__dirname, '../templates/entity/entity.hbs');
    const entityOutputPath = path.join(modulePath, 'domain/entities', `${(0, naming_utils_1.toKebabCase)(entityName)}.entity.ts`);
    if (await (0, file_utils_1.fileExists)(entityOutputPath)) {
        console.log(chalk_1.default.yellow(`Entity ${entityName} already exists. Skipping...`));
        return;
    }
    await (0, file_utils_1.generateFromTemplate)(entityTemplatePath, entityOutputPath, templateData);
    // Generate ORM entity if not skipped
    if (!options.skipOrm) {
        const ormTemplatePath = path.join(__dirname, '../templates/orm-entity/orm-entity.hbs');
        const ormOutputPath = path.join(modulePath, 'infrastructure/orm-entities', `${(0, naming_utils_1.toKebabCase)(entityName)}.orm-entity.ts`);
        await (0, file_utils_1.generateFromTemplate)(ormTemplatePath, ormOutputPath, templateData);
    }
    // Generate mapper if not skipped
    if (!options.skipMapper) {
        const mapperTemplatePath = path.join(__dirname, '../templates/mapper/mapper.hbs');
        const mapperOutputPath = path.join(modulePath, 'infrastructure/mappers', `${(0, naming_utils_1.toKebabCase)(entityName)}.mapper.ts`);
        await (0, file_utils_1.generateFromTemplate)(mapperTemplatePath, mapperOutputPath, templateData);
    }
    // Generate repository if not skipped
    if (!options.skipRepo) {
        const repoTemplatePath = path.join(__dirname, '../templates/repository/repository.hbs');
        const repoOutputPath = path.join(modulePath, 'infrastructure/repositories', `${(0, naming_utils_1.toKebabCase)(entityName)}.repository.ts`);
        await (0, file_utils_1.generateFromTemplate)(repoTemplatePath, repoOutputPath, templateData);
    }
    // Update index files
    await updateIndexFiles(modulePath, entityName, options);
    console.log(chalk_1.default.green(`✅ Entity ${entityName} generated successfully!`));
}
async function updateIndexFiles(_modulePath, _entityName, options) {
    // This would update the index.ts files to include the new exports
    // For now, we'll just log a reminder
    console.log(chalk_1.default.yellow(`\n⚠️  Remember to update the following index files:`));
    console.log(`   - domain/entities/index.ts`);
    if (!options.skipOrm) {
        console.log(`   - infrastructure/orm-entities/index.ts`);
    }
    if (!options.skipMapper) {
        console.log(`   - infrastructure/mappers/index.ts`);
    }
    if (!options.skipRepo) {
        console.log(`   - infrastructure/repositories/index.ts`);
    }
}
//# sourceMappingURL=generate-entity.js.map