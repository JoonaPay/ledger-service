"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.generateModule = generateModule;
const path = __importStar(require("path"));
const chalk_1 = __importDefault(require("chalk"));
const file_utils_1 = require("../utils/file.utils");
const naming_utils_1 = require("../utils/naming.utils");
async function generateModule(moduleName, options) {
    console.log(chalk_1.default.blue(`Generating module: ${moduleName}`));
    const basePath = options.path || process.cwd();
    const modulePath = (0, file_utils_1.getModulePath)(basePath, moduleName);
    // Create module directory structure
    await (0, file_utils_1.ensureDir)(path.join(modulePath, 'application/commands'));
    await (0, file_utils_1.ensureDir)(path.join(modulePath, 'application/controllers'));
    await (0, file_utils_1.ensureDir)(path.join(modulePath, 'application/domain/entities'));
    await (0, file_utils_1.ensureDir)(path.join(modulePath, 'application/domain/events'));
    await (0, file_utils_1.ensureDir)(path.join(modulePath, 'application/domain/services'));
    await (0, file_utils_1.ensureDir)(path.join(modulePath, 'application/domain/usecases'));
    await (0, file_utils_1.ensureDir)(path.join(modulePath, 'application/dto/requests'));
    await (0, file_utils_1.ensureDir)(path.join(modulePath, 'application/dto/responses'));
    await (0, file_utils_1.ensureDir)(path.join(modulePath, 'application/queries'));
    await (0, file_utils_1.ensureDir)(path.join(modulePath, 'infrastructure/mappers'));
    await (0, file_utils_1.ensureDir)(path.join(modulePath, 'infrastructure/orm-entities'));
    await (0, file_utils_1.ensureDir)(path.join(modulePath, 'infrastructure/repositories'));
    // Generate module file
    const templateData = (0, file_utils_1.prepareTemplateData)(moduleName, moduleName);
    const templatePath = path.join(__dirname, '../templates/module/module.hbs');
    const outputPath = path.join(modulePath, `${(0, naming_utils_1.toKebabCase)(moduleName)}.module.ts`);
    await (0, file_utils_1.generateFromTemplate)(templatePath, outputPath, templateData);
    // Create empty index files
    const indexPaths = [
        'application/commands/index.ts',
        'application/controllers/index.ts',
        'application/domain/entities/index.ts',
        'application/domain/events/index.ts',
        'application/domain/services/index.ts',
        'application/domain/usecases/index.ts',
        'application/dto/requests/index.ts',
        'application/dto/responses/index.ts',
        'application/queries/index.ts',
        'infrastructure/mappers/index.ts',
        'infrastructure/orm-entities/index.ts',
        'infrastructure/repositories/index.ts',
    ];
    for (const indexPath of indexPaths) {
        const arrayName = getArrayNameFromPath(indexPath);
        await generateIndexFile(path.join(modulePath, indexPath), arrayName);
    }
    console.log(chalk_1.default.green(`âœ… Module ${moduleName} generated successfully!`));
}
function getArrayNameFromPath(indexPath) {
    const parts = indexPath.split('/');
    const lastPart = parts[parts.length - 2];
    const mapping = {
        'commands': 'CommandHandlers',
        'controllers': 'Controllers',
        'entities': 'Entities',
        'events': 'Events',
        'services': 'Services',
        'usecases': 'UseCases',
        'requests': 'Requests',
        'responses': 'Responses',
        'queries': 'Queries',
        'mappers': 'Mappers',
        'orm-entities': 'OrmEntities',
        'repositories': 'Repositories',
    };
    return (lastPart && mapping[lastPart]) || 'Exports';
}
async function generateIndexFile(filePath, arrayName) {
    const content = `export const ${arrayName} = [];\n`;
    await (0, file_utils_1.ensureDir)(path.dirname(filePath));
    await require('../utils/file.utils').writeFile(filePath, content);
}
//# sourceMappingURL=generate-module.js.map