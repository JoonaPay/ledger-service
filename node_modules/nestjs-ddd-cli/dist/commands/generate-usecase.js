"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.generateUseCase = generateUseCase;
const path = __importStar(require("path"));
const chalk_1 = __importDefault(require("chalk"));
const file_utils_1 = require("../utils/file.utils");
const naming_utils_1 = require("../utils/naming.utils");
async function generateUseCase(useCaseName, options) {
    if (!options.module) {
        throw new Error('Module name is required. Use -m or --module option.');
    }
    console.log(chalk_1.default.blue(`Generating use case: ${useCaseName}`));
    const basePath = options.path || process.cwd();
    const modulePath = (0, file_utils_1.getModulePath)(basePath, options.module);
    // Extract entity name from use case name (e.g., CreateUser -> User)
    const entityName = extractEntityName(useCaseName);
    const templateData = (0, file_utils_1.prepareTemplateData)(entityName, options.module);
    // Generate use case
    const useCaseTemplatePath = path.join(__dirname, '../templates/usecase/create-usecase.hbs');
    const useCaseOutputPath = path.join(modulePath, 'application/usecases', `${(0, naming_utils_1.toKebabCase)(useCaseName)}.use-case.ts`);
    await (0, file_utils_1.generateFromTemplate)(useCaseTemplatePath, useCaseOutputPath, templateData);
    // Generate command
    const commandTemplatePath = path.join(__dirname, '../templates/command/create-command.hbs');
    const commandOutputPath = path.join(modulePath, 'application/commands', `${(0, naming_utils_1.toKebabCase)(useCaseName)}.command.ts`);
    await (0, file_utils_1.generateFromTemplate)(commandTemplatePath, commandOutputPath, templateData);
    // Generate DTO
    const dtoTemplatePath = path.join(__dirname, '../templates/dto/create-dto.hbs');
    const dtoOutputPath = path.join(modulePath, 'application/dto/requests', `${(0, naming_utils_1.toKebabCase)(useCaseName)}.dto.ts`);
    await (0, file_utils_1.generateFromTemplate)(dtoTemplatePath, dtoOutputPath, templateData);
    console.log(chalk_1.default.green(`✅ Use case ${useCaseName} generated successfully!`));
    console.log(chalk_1.default.yellow(`\n⚠️  Remember to update the following index files:`));
    console.log(`   - application/usecases/index.ts`);
    console.log(`   - application/commands/index.ts`);
    console.log(`   - application/dto/requests/index.ts`);
}
function extractEntityName(useCaseName) {
    // Remove common prefixes
    const prefixes = ['Create', 'Update', 'Delete', 'Get', 'Find', 'List'];
    let entityName = useCaseName;
    for (const prefix of prefixes) {
        if (useCaseName.startsWith(prefix)) {
            entityName = useCaseName.substring(prefix.length);
            break;
        }
    }
    return entityName;
}
//# sourceMappingURL=generate-usecase.js.map